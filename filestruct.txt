AI Tutor Orchestrator - File Structure
==========================================

This document outlines the complete file structure of the AI Tutor Orchestrator project.

PROJECT ROOT: /Users/yatapavankumar/Documents/ai tutor/

├── main.py                          # Main FastAPI application entry point
├── config.py                        # Configuration management
├── requirements.txt                  # Python dependencies
├── env.example                      # Environment variables template
├── README.md                        # Project documentation
├── filestruct.txt                   # This file - project structure documentation
├── explanation.txt                  # System explanation and architecture
├── techstack.txt                    # Technology stack documentation

├── models.py                        # Pydantic data models and schemas
├── context_analyzer.py              # Context analysis engine using LangChain
├── parameter_extractor.py           # Parameter extraction system
├── tool_orchestrator.py             # Main orchestration layer with LangGraph
├── schema_validator.py              # Schema validation and error handling
├── state_manager.py                 # Conversation state and student context management

├── mock_tools/                      # Mock educational tools for testing
│   ├── note_maker.py               # Note Maker Tool (Port 8001)
│   ├── flashcard_generator.py      # Flashcard Generator Tool (Port 8002)
│   └── concept_explainer.py        # Concept Explainer Tool (Port 8003)

├── tests/                           # Test suite
│   ├── test_system.py              # Comprehensive system tests
│   ├── test_context_analyzer.py    # Context analyzer unit tests
│   ├── test_parameter_extractor.py # Parameter extractor unit tests
│   ├── test_tool_orchestrator.py   # Tool orchestrator unit tests
│   ├── test_schema_validator.py    # Schema validator unit tests
│   └── test_state_manager.py       # State manager unit tests

├── docs/                            # Documentation directory
│   ├── api_documentation.md        # API endpoint documentation
│   ├── architecture_diagram.md     # System architecture diagrams
│   ├── setup_guide.md              # Setup and installation guide
│   └── usage_examples.md           # Usage examples and demos

├── scripts/                         # Utility scripts
│   ├── start_services.py           # Script to start all services
│   ├── run_tests.py                # Test runner script
│   └── demo_scenarios.py            # Demo scenario scripts

├── data/                            # Data and configuration files
│   ├── sample_conversations.json   # Sample conversation data
│   ├── tool_schemas.json           # Tool schema definitions
│   └── test_data.json              # Test data sets

├── logs/                            # Log files directory
│   ├── orchestrator.log            # Main orchestrator logs
│   ├── tools.log                   # Educational tools logs
│   └── errors.log                   # Error logs

└── .gitignore                       # Git ignore file

CORE COMPONENTS BREAKDOWN:
==========================

1. MAIN APPLICATION (main.py)
   - FastAPI application with CORS middleware
   - Main orchestration endpoint (/orchestrate)
   - Health check and status endpoints
   - Error handling and logging

2. CONFIGURATION (config.py)
   - Environment variable management
   - Application settings
   - Database and API configurations

3. DATA MODELS (models.py)
   - Pydantic models for type safety
   - Request/response schemas
   - Enum definitions for constraints

4. CONTEXT ANALYSIS (context_analyzer.py)
   - Intent detection using pattern matching and LLM
   - Parameter extraction from conversation
   - Educational context understanding

5. PARAMETER EXTRACTION (parameter_extractor.py)
   - Intelligent parameter mapping
   - Missing parameter inference
   - Validation and confidence scoring

6. TOOL ORCHESTRATION (tool_orchestrator.py)
   - LangGraph workflow management
   - Tool execution coordination
   - Response formatting and error handling

7. SCHEMA VALIDATION (schema_validator.py)
   - Request/response validation
   - Error handling and sanitization
   - Tool schema management

8. STATE MANAGEMENT (state_manager.py)
   - Student profile management
   - Conversation session tracking
   - Learning progress monitoring

9. MOCK TOOLS (mock_tools/)
   - Note Maker Tool - generates structured notes
   - Flashcard Generator - creates study flashcards
   - Concept Explainer - provides concept explanations

10. TESTING (tests/)
    - Unit tests for all components
    - Integration tests
    - Performance tests
    - Mock-based testing

DEPLOYMENT STRUCTURE:
====================

Production Deployment:
├── orchestrator/                    # Main orchestrator service
│   ├── main.py
│   ├── config.py
│   └── requirements.txt
├── tools/                          # Educational tools services
│   ├── note_maker/
│   ├── flashcard_generator/
│   └── concept_explainer/
├── nginx/                          # Reverse proxy configuration
├── docker/                         # Docker configurations
│   ├── Dockerfile.orchestrator
│   ├── Dockerfile.tools
│   └── docker-compose.yml
└── kubernetes/                     # Kubernetes configurations
    ├── orchestrator-deployment.yaml
    ├── tools-deployment.yaml
    └── services.yaml

DEVELOPMENT STRUCTURE:
=====================

For development and testing:
├── src/                           # Source code
├── tests/                         # Test files
├── docs/                          # Documentation
├── scripts/                       # Development scripts
├── data/                          # Test data
└── logs/                          # Development logs

FILE PERMISSIONS:
================

- Python files: 644 (readable by all, writable by owner)
- Configuration files: 600 (readable/writable by owner only)
- Log files: 666 (readable/writable by all)
- Scripts: 755 (executable by all, writable by owner)

DEPENDENCIES:
============

Core Dependencies (requirements.txt):
- fastapi==0.104.1
- uvicorn==0.24.0
- pydantic==2.5.0
- langchain==0.1.0
- langchain-openai==0.0.2
- langgraph==0.0.20
- openai==1.3.0
- httpx==0.25.2
- python-multipart==0.0.6
- pytest==7.4.3
- pytest-asyncio==0.21.1
- python-dotenv==1.0.0
- sqlalchemy==2.0.23
- psycopg2-binary==2.9.9
- alembic==1.13.0

Development Dependencies:
- black (code formatting)
- flake8 (linting)
- mypy (type checking)
- coverage (test coverage)

BUILD AND DEPLOYMENT:
====================

Build Process:
1. Install dependencies: pip install -r requirements.txt
2. Set environment variables: cp env.example .env
3. Run tests: pytest tests/
4. Start services: python scripts/start_services.py

Deployment Process:
1. Build Docker images
2. Deploy with docker-compose or Kubernetes
3. Configure reverse proxy
4. Set up monitoring and logging

This file structure provides a complete, scalable, and maintainable AI Tutor Orchestrator system with clear separation of concerns and comprehensive testing coverage.
